# -*- coding: utf-8 -*-
"""A10-Used-Vehicle-Product-Analysis.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1PdICZkYuDlDK61ZGXzrUi2UTI46HhBUr

<font face="Helvetica" size=7 color='#014636'> **Used Vehicle Product Analysis** <font>

<font face="Helvetica" size=4> **Group A10** <font>

*   <font face="Helvetica" size=3> Rick Wang
*   Ohm Srikiatkhachorn
*   Nan Li
*   Kendall Sims
*   Jay Singh
*   Ari Kolahal<font>

<font face="Helvetica" size=4> **Table of Contents** <font>


1.<font face="Helvetica" size=3>  [Executive Summary](#executive-summary)<font>

2.<font face="Helvetica" size=3>   [Project Proposal](#project-proposal)<font>
  * <font face="Helvetica" size=3> [Introduction](#introduction)<font>
  * <font face="Helvetica" size=3> [Motivation](#motivation) <font>

3.<font face="Helvetica" size=3> [Data & its Source](#data&itssource)<font>
* <font face="Helvetica" size=3>  [Data Dictonary](#datadictionary) <font>


4.<font face="Helvetica" size=3> [Data Cleaning and Manipulation](#DataCleaningandManipulation) <font>

5.<font face="Helvetica" size=3> [Exploratory Data Analysis & Questions](#exploratorydataanalysis&questrions)<font>

6.<font face="Helvetica" size=3> [Conclusions](#conclusions)

7.<font face="Helvetica" size=3> [Challenges](#challenges)


8.<font face="Helvetica" size=3> [Reference](#reference)

9.<font face="Helvetica" size=3> [Generative-AI-Disclosure](#generativeAIdisclosure) <font>

#<font face="Helvetica" size=6 color=#02818a> **Executive Summary <a name="executive-summary"></a>** <font>
----
This report analyzes the factors influencing used car prices in the US and UK. Using Python libraries such as pandas, matplotlib, seaborn, bokeh, numpy, and sklearn, we examined key features—brand, model, transmission type, fuel type, year, mileage, engine size, and mpg—to identify pricing trends. Before conducting our analysis, we cleaned the data, merged the US and UK datasets, and consulted external resources on used car pricing to form hypotheses and provide context. Our goal is to assist sellers in both countries with setting competitive prices based on the unique attributes of their vehicles. We developed a machine learning model capable of predicting the price of a used car based on its features, streamlining this complex process for sellers. Ultimately, our goal is to provide insights that help sellers achieve the highest possible sale prices, maximizing their profits. The most popular car brands in our dataset are Ford, Mercedes, Volkswagen, Vauxhall, and BMW. Our analysis shows that transmission, year, and engine size have the strongest linear correlations with price, with engine size exhibiting significant variability, likely due to luxury and high-performance models. This idea can be substantiated by the feature importance graph dervied from the ML model. However, features like mileage and mpg were also important to forcasting price.
On average, US cars are more expensive than UK cars. Additionally, petrol and diesel vehicles are predominantly manual, while hybrid cars are mostly automatic. Hybrid cars are priced only slightly higher than petrol or diesel vehicles on average, offering moderate accessibility to consumers. With customers willing to pay a higher price for more sustainable fuel, there is an opportunity for hybrid car market growth, which could help reduce the dominance of petrol and diesel cars and mitigate their environmental impact.

#<font face="Helvetica" size=6 color=02818a> **Project Proposal <a name="project-proposal"></a>** <font>

##<font face="Helvetica" size=5 color=01382b> **Introduction <a name="introduction"></a>** <font>
---
Setting the right price for a used vehicle can be challenging for individuals with limited knowledge about cars and the abundance of features that affect pricing. Often, sellers miss out on potential profits by settling for lower offers just to expedite the sale. To combat this business problem, Team 10 has developed a solution through comprehensive analysis of the key attributes influencing vehicle pricing in the United States and the United Kingdom.

The storyline of our Python notebook revolves around encouraging sellers to effectively price their used cars for independent sales. To explore this, we analyzed used car market trends, explored car conditions, dove into car specifications, considered the influence of sustainability on consumer choices, and created a machine learning model to predict the price. This cohesive approach not only equips sellers with valuable insights but also enables them to make informed pricing decisions that maximize their profits in a competitive marketplace.

##<font face="Helvetica" size=5, color = 01382b> **Motivation <a name="motivation"></a>** <font>

---

The vehicle market has historically lacked transparency, with prices often dictated by dealers. This is particularly challenging for individuals looking to trade in or sell their cars, as they typically lack clear pricing benchmarks and informed negotiation strategies. In this project, Team 10 aims to analyze used vehicle sales data from the United States and the United Kingdom to provide valuable insights into the key factors that affect a car's value. This will equip sellers with a reliable pricing reference, enabling more effective negotiations with customers. Our research will empower sellers to establish competitive prices, maximizing their profits by highlighting the factors that significantly impact a used vehicle's value. This analysis is particularly pertinent given the rapid growth of the used car market: in the UK, it is projected to expand from USD 58.12 billion in 2024 to USD 89.32 billion by 2029, with a compound annual growth rate of 11.70%. In the US, the market was valued at USD 195.84 billion in 2021 and is expected to reach USD 302.47 billion by 2027.

#<font face="Helvetica" size=6 color=02818a> **Data & its Source<a name="data&itssource"></a>** <font>

----
The data utilized for this project comes from two sources:

1.[**UK Used Car Dataset**:](https://www.kaggle.com/datasets/adityadesai13/used-car-dataset-ford-and-mercedes)<font>
* Consists of 100,000 used car sales data rows distributed into 11 datasets with 9-11 columns.
* In order to conduct proper analysis, these datasets were merged with the common set of columns across the datasets.

2.[**US Used Car Dataset**:](https://www.kaggle.com/datasets/taeefnajib/used-car-price-prediction-dataset)
* Consists of 4,000 used car sales data rows distributed across 12 columns.
* This dataset was later merged with the UK car sales data and the relevant columns were retained for the analysis.

At the end of the the cleaning process, the following represents the metadata:

##<font face="Helvetica" size=5 color=01382b> **Data Dictionary <a name="datadictionary"></a>** <font>

---

Column | Description | Data Type
------ | ----------- | ---------
**brand** | The brand of the car. | ``categorical``
**model** | The model of the car. | ``categorical``
**year** | The year the car was manufactured. | ``datetime``
**transmission** | Type of transmission. | ``categorical``
**mileage** | The total mileage on the car (in miles); as a key indicator of wear and potential maintenance requirements. | ``numeric``
**fuel_Type** | Type of fuel used.| ``categorical``
**engine_size** | The capacity of the car engine (in litres). | ``numeric``
**tax** |  The tax amount for the car. | `numeric`
**mpg** | Miles per gallon; as a key indicator of fuel efficiency | ``numeric``
**country** | The country where the car was sold. | ``numeric``
**price** | The price at which the car was sold.| `numeric`

#<font face="Helvetica" size=6 color=02818a> **Data Cleaning and Manipulation<a name="DataCleaningandManipulation"></a>** <font>

----

<font face="Helvetica" size=4 color=01382b> **Importing Required Libraries** <font>
---
"""

import pandas as pd
import numpy as np
import seaborn as sns
import matplotlib.pyplot as plt

"""<font face="Helvetica" size=4 color=01382b> **Data Cleaning and Transformation** <font>
---

During the data cleaning phase, we had a total of 12 files that needed to be cleaned and merged. First, we added a "brand" column and a "country" column to all the files to ensure that each observation was unique and non-redundant. Next, we standardized the data into a uniform format and consolidated the different names used across the files (e.g., some files used "Merc," "merc," or "Mercedes-Benz"). We also standardized the data types throughout the dataset.

Before concatenating the UK and USA datasets, we converted the prices in pounds to US dollars. For handling missing values, we grouped the data by brand and filled the missing values with the average numbers for the corresponding brand. If no reference brand data was available, we used the overall average value to fill the null value.

###<font face="Helvetica" size=3 color=01382b> **Cleaning the USA Dataset** <font>
"""

#Import Dataset with required fields
usa = pd.read_csv("/content/used_cars_USA.csv")
usa = usa[['brand', 'model', 'model_year', 'transmission', 'milage', 'fuel_type', 'engine', 'price' ]]

#Dropping null values
usa = usa.dropna()
#usa = usa.sort_values('brand').reset_index(drop = True)

# Tidying the data within the columns
usa['engine'] = usa['engine'].str.replace('Liter', 'L')
usa['engine_size'] = usa['engine'].str.extract(r'(\d+\.\d+L)')
usa['engine_size'] = usa['engine_size'].str.replace('L', '')

usa['milage'] =usa['milage'].str.replace('mi', '').str.replace(',', '').str.replace('.', '').str.strip()

usa['price'] = usa['price'].str.replace('$', '')

usa['transmission'] = usa['transmission'].str.replace(r'4-Speed A/T|Variable|Transmission Overdrive Switch|A/T|9-Speed A/T|6-Speed A/T|10-Speed Automatic|8-Speed A/T|Automatic|10-Speed A/T|9-Speed Automatic|5-Speed A/T|7-Speed A/T|Automatic, 8-Spd|8-Speed Automatic|1-Speed Automatic|Automatic, 8-Spd M STEPTRONIC w/Drivelogic, Sport & Manual Modes|Automatic, 8-Spd Sport w/Sport & Manual Modes|8-SPEED A/T|Automatic CVT|6-Speed Automatic|10-Speed Automatic with Overdrive|4-Speed Automatic|6-Speed Electronically Controlled Automatic with O|5-Speed Automatic|7-Speed DCT Automatic|CVT Transmission|7-Speed Automatic|8-SPEED AT|Automatic, 10-Spd|Automatic, 9-Spd 9G-Tronic|CVT-F','Automatic',regex=True)
usa['transmission'] = usa['transmission'].str.replace(r'6-Speed M/T|5-Speed M/T|M/T|6-Speed Manual|7-Speed M/T|8-Speed Manual|Manual|7-Speed Manual|Manual, 6-Spd|6 Speed Mt', 'Manual', regex = True)
usa['transmission'] = usa['transmission'].str.replace(r'6 Speed At/Mt|Automatic, 8-Spd PDK Dual-Clutch|Automatic, 8-Spd Dual-Clutch|Auto, 6-Spd w/CmdShft|6-Speed Automatic with Auto-Shift|Automatic, 7-Spd S tronic Dual-Clutch|7-Speed Automatic with Auto-Shift|8-Speed Automatic with Auto-Shift|Transmission w/Dual Shift Mode|9-Speed Automatic with Auto-Shift', 'Semi-Auto', regex = True)
usa2 = usa.loc[usa['transmission'].isin(['Automatic', 'Manual', 'Semi-Auto'])]

# Standardizing the format of the dataset
usa2 = usa2[~usa2['engine_size'].isna()]
usa2 = usa2.drop('engine', axis = 1)
usa2 = usa2.reset_index(drop=True)
usa2 = usa2.rename(columns = {'model_year': 'year', 'milage': 'mileage','fuel_type':'fuelType'})
usa2['country'] = 'USA'
usa2['mpg'] = 'NA'
usa2['tax'] = 'NA'
usa2 = usa2[['brand', 'model', 'year', 'transmission', 'mileage', 'fuelType', 'engine_size', 'tax', 'mpg', 'country', 'price']]

#satndardizing the data type
usa2["price"] = usa2["price"].str.replace(",", "").str.strip()
usa2['price'] = usa2['price'].astype(int)
print(usa2["price"])
# standardizeing the name of brand to match UK's name
usa2['brand'] = usa2['brand'].replace('Mercedes-Benz', 'Merc')

# Saving dataframe as csv to local drive
#usa2.to_csv('clean_USA.csv', index=False)
print("The USA Clean Data File has been saved.")
USA_cars = usa2

"""###<font face="Helvetica" size=3 color=01382b> **Cleaning the Focus Dataset** <font>"""

#read the data
df_focus = pd.read_csv("/content/unclean focus.csv")
# Drop complete duplicates
df_focus.drop_duplicates(inplace=True)

# Drop rows where all values are NaN
df_focus.dropna(how='all',inplace=True)

# Cleaning the price column
# Remove the pound sign and any comma
df_focus['price_numeric'] = df_focus['price'].str.replace('£', '').str.replace(',','').str.strip()

# Drop the rows where price values are missing
df_focus = df_focus.dropna(subset=['price_numeric'])

# Convert the price value to int64
df_focus['price_numeric'] = pd.to_numeric(df_focus['price_numeric'],errors='coerce').astype('int64')
df_focus['price_cleaned'] = df_focus['price_numeric']

# Cleaning the year column
# Fill NaN with 0
df_focus['year'].fillna(0, inplace=True)

# Convert to numeric first, handling any errors by converting invalid entries to NaN
df_focus['year_numeric'] = pd.to_numeric(df_focus['year'], errors='coerce')

# Now convert to int64, filling NaN with 0 (in case there are still invalid entries)
df_focus['year_cleaned'] = df_focus['year_numeric'].fillna(0).astype('int64')

# Cleaning the fuel type columns
df_focus['fuel type'].astype('str').str.capitalize()
df_focus['fuel type2'].astype('str').str.capitalize()

# Combine the two columns together
df_focus.loc[~df_focus['fuel type'].isin(['Petrol', 'Diesel']), 'fuel type'] = df_focus['fuel type2']
df_focus = df_focus.rename(columns= {'fuel type':'fuel_type_cleaned'})

# Cleaning mileage and mpg data
df_focus= df_focus.rename(columns={"mileage2": "mpg"})

# Remove commas from string values
df_focus['mileage'] = df_focus['mileage'].str.replace(',', '').str.strip()
df_focus['mpg'] = df_focus['mpg'].str.replace(',', '').str.strip()

# Convert str values in mpg to numeric values
df_focus['mpg'] = pd.to_numeric(df_focus['mpg'],errors='coerce').astype('float64')

# Fill NaN in mileage column wtth mpg values
df_focus['mileage'] = df_focus['mileage'].fillna(df_focus['mpg'])

# Convert str values in mileage column to numeric values
df_focus['mileage'] = pd.to_numeric(df_focus['mileage'],errors='coerce')

# Replace the null value in mileage with the average
df_focus['mileage'] = df_focus['mileage'].fillna(df_focus['mileage'].mean())
# Convert datatypes
df_focus['mileage'] = df_focus['mileage'].astype('int64')

# Fill the missing mpg values with the average mpg
mpg_means = np.mean(df_focus.loc[df_focus['mpg'] < 100, 'mpg'])

df_focus.loc[df_focus['mpg']>=100,'mpg'] = mpg_means
df_focus['mpg'].fillna(mpg_means,inplace=True)
df_focus['mpg'] = df_focus['mpg'].round(1)

# Cleaning engine size columns
# Convert the cleaned 'engine size' column to numeric values
df_focus['engine size'] = pd.to_numeric(df_focus['engine size'], errors='coerce')
df_focus['engine size2']= pd.to_numeric(df_focus['engine size2'],errors='coerce')

 #By exploring the missing values of engine size and engine size2
 #it seems highly likely that the engine size data was split into two columns: engine size,engine size2

# Fill NaN values with 0
df_focus['engine size'].fillna(0,inplace = True)
df_focus['engine size2'].fillna(0,inplace = True)

# Convert unit in cc into liter
df_focus.loc[df_focus['engine size'] > 100 ,'engine size'] = df_focus['engine size']/1000
df_focus.loc[df_focus['engine size2'] > 100 ,'engine size2'] = df_focus['engine size2']/1000

# Create a new column where engine size is not 0, otherwise use the values in the column of engine size2
df_focus['engine_size_cleaned'] = np.where(df_focus['engine size'] !=0, df_focus['engine size'], df_focus['engine size2'])
df_focus['engine_size_cleaned']= df_focus['engine_size_cleaned'].round(1)

# Drop unwanted columns and rename the remaining columns
df_focus = df_focus.drop(columns=['engine size','engine size2','fuel type2','reference','price','price_numeric','year','year_numeric'],axis=1)
df_focus = df_focus.rename(columns={'fuel_type_cleaned':'fuel_type','price_cleaned':'price','year_cleaned':'year','engine_size_cleaned':'engine_size'})

# Insert relevant columns：brand, tax, country
df_focus['brand']= 'Ford'
df_focus['tax'] = np.nan
df_focus['country'] = 'UK'

# Rearrange the order of columns
new_order = ['brand','model','year','transmission','mileage','fuel_type','engine_size','tax','mpg','country','price']
df_focus = df_focus[new_order]
df_focus = df_focus.rename(columns={'fuel_type' : 'fuelType'})
# assign path and file name
folder_path = ''
file_name = 'clean_focus.csv'
file_path = folder_path + file_name

# save dataframe as csv
df_focus.to_csv(file_path, index=False)
print(f'File has been saved to {file_path}')

"""###<font face="Helvetica" size=3 color=01382b> **Cleaning the C-Class Dataset** <font>"""

# CSV file manually uploaded to Google Colab
import pandas as pd
import numpy as np
import seaborn as sns
import matplotlib as plt

unclean_cclass = pd.read_csv('/content/unclean cclass.csv')

# Dropping all the empty rows
unclean_cclass_v1 = unclean_cclass.dropna(how='all')

# Looking at the data we understand that mileage2 is mpg, therefore changing its name

unclean_cclass_v2 = unclean_cclass_v1.rename(columns={"mileage2": "mpg"})

# Removing the ',' from mpg values as it creates error while converting to float

unclean_cclass_v2['mpg'] = unclean_cclass_v2['mpg'].str.replace(',', '')

# Converting 'mpg' column to float from object

unclean_cclass_v2['mpg'] = pd.to_numeric(unclean_cclass_v2['mpg'], errors='coerce').astype(float)

# Removing commas from the str values
unclean_cclass_v2['mileage'] = unclean_cclass_v2['mileage'].str.replace(',', '')

# As our theory was correct. Replacing the null vales of mileage with the mpg column
unclean_cclass_v2['mileage'] = unclean_cclass_v2['mileage'].fillna(unclean_cclass_v2['mpg'])

# Converting all the values in the column to float so that all become the same type
unclean_cclass_v2['mileage'] = pd.to_numeric(unclean_cclass_v2['mileage'], errors='coerce').astype(float)

# Replacing the remaining null values with the mean value
unclean_cclass_v2['mileage'] = unclean_cclass_v2['mileage'].fillna(unclean_cclass_v2['mileage'].mean())

# Converting the column into required format
unclean_cclass_v2['mileage'] = unclean_cclass_v2['mileage'].astype(int)

# Dropping the null values in Year
unclean_cclass_v3 = unclean_cclass_v2.dropna(subset=['year'])

# Converting the year into required format
unclean_cclass_v3['year'] = unclean_cclass_v3['year'].astype(int)

unclean_cclass_v3[~unclean_cclass_v3['fuel type2'].isin(['Petrol','Diesel','Hybrid'])]

# Some fuel type values were populated in fuel type and some in fuel type2. Combining both the values

unclean_cclass_v3['fuel type2'] = unclean_cclass_v3['fuel type2'].fillna(unclean_cclass_v3['fuel type'])

# Dropping one of the fuel type columns
unclean_cclass_v4 = unclean_cclass_v3.drop('fuel type', axis=1)

unclean_cclass_v4 = unclean_cclass_v4.rename(columns={"fuel type2": "fuelType"})

unclean_cclass_v4['engine size2'] = pd.to_numeric(unclean_cclass_v4['engine size2'], errors='coerce').astype(float)

unclean_cclass_v4['engine size'] = pd.to_numeric(unclean_cclass_v4['engine size'], errors='coerce').astype(float)

unclean_cclass_v4['engine size2'] = unclean_cclass_v4['engine size2'].fillna(unclean_cclass_v3['engine size'])

# Dropping one of the engine size columns
unclean_cclass_v4 = unclean_cclass_v4.drop('engine size', axis=1)

unclean_cclass_v4 = unclean_cclass_v4.rename(columns={"engine size2": "engine_size"})

unclean_cclass_v4 = unclean_cclass_v4.drop('reference', axis=1)

unclean_cclass_v4['brand'] = 'Mercedes'
unclean_cclass_v4['country'] = 'UK'

# fill Na in mpg by average value
unclean_cclass_v4["mpg"] = unclean_cclass_v4["mpg"].fillna(unclean_cclass_v4.mpg.mean())
# add tax column, and value it as Nan
unclean_cclass_v4["tax"] = np.nan

sequence = ["brand", "model", "year", "transmission", "mileage", "fuelType", "engine_size", "tax", "mpg", "country", "price"]
unclean_cclass_v4 = unclean_cclass_v4[sequence]

# remove the currency sign
unclean_cclass_v4['price'] = unclean_cclass_v4['price'].str.replace('£', '', regex=False)
# remove commas and stripping any spaces
unclean_cclass_v4['price'] = unclean_cclass_v4['price'].str.replace(',', '').str.strip()
# Convert the column to numeric type
unclean_cclass_v4['price'] = unclean_cclass_v4['price'].astype(int)

# Convert the column to numeric type
unclean_cclass_v4['engine_size'] = unclean_cclass_v4['engine_size'].str.replace('£', '', regex=False)
unclean_cclass_v4['engine_size'] = unclean_cclass_v4['engine_size'].str.replace('CC', '', regex=False)
unclean_cclass_v4['engine_size'] = unclean_cclass_v4['engine_size'].str.replace(',', '').str.strip()
unclean_cclass_v4['engine_size'] = unclean_cclass_v4['engine_size'].astype(float)

unclean_cclass_v4["brand"] = unclean_cclass_v4["brand"].replace("Mercedes", "Merc")

unclean_cclass_v4.to_csv('clean_cclass.csv', index=False)

"""###<font face="Helvetica" size=3 color=01382b> **Cleaning the Audi Dataset** <font>"""

df_audi = pd.read_csv("audi.csv")
#If want to rename column, use this one
df_audi.rename(columns={'engineSize': 'engine_size'}, inplace=True)
# add a new column and give the value
df_audi["brand"] = "Audi"
df_audi["country"] = "UK"
# reset sequence
sequence = ["brand", "model", "year", "transmission", "mileage", "fuelType", "engine_size", "tax", "mpg", "country", "price"]
df_audi = df_audi[sequence]
df_audi.info()
df_audi.head()

# assign path and file name
folder_path = 'C:\\Users\\Rick\\OneDrive\\Desktop\\BA815_project\\clean_data\\'
file_name = 'clean_Audi.csv'
file_path = folder_path + file_name

# save dataframe as csv
df_audi.to_csv(file_path, index=False)
print(f'File has been saved to {file_path}')

"""###<font face="Helvetica" size=3 color=01382b> **Cleaning the BMW Dataset** <font>"""

df_bmw = pd.read_csv("bmw.csv")
#If want to rename column, use this one
df_bmw.rename(columns={'engineSize': 'engine_size'}, inplace=True)
# add a new column and give the value
df_bmw["brand"] = "BMW"
df_bmw["country"] = "UK"
# reset sequence
sequence = ["brand", "model", "year", "transmission", "mileage", "fuelType", "engine_size", "tax", "mpg", "country", "price"]
df_bmw = df_bmw[sequence]
df_bmw.info()
df_bmw.head()

# assign path and file name
folder_path = 'C:\\Users\\Rick\\OneDrive\\Desktop\\BA815_project\\clean_data\\'
file_name = 'clean_bmw.csv'
file_path = folder_path + file_name

# save dataframe as csv
df_bmw.to_csv(file_path, index=False)
print(f'File has been saved to {file_path}')

"""###<font face="Helvetica" size=3 color=01382b> **Cleaning the Ford Dataset** <font>"""

df_ford = pd.read_csv("ford.csv")
#If want to rename column, use this one
df_ford.rename(columns={'engineSize': 'engine_size'}, inplace=True)
# add a new column and give the value
df_ford["brand"] = "Ford"
df_ford["country"] = "UK"
# reset sequence
sequence = ["brand", "model", "year", "transmission", "mileage", "fuelType", "engine_size", "tax", "mpg", "country", "price"]
df_ford = df_ford[sequence]
df_ford.info()
df_ford.head()

# assign path and file name
folder_path = 'C:\\Users\\Rick\\OneDrive\\Desktop\\BA815_project\\clean_data\\'
file_name = 'clean_ford.csv'
file_path = folder_path + file_name

# save dataframe as csv
df_ford.to_csv(file_path, index=False)
print(f'File has been saved to {file_path}')

"""###<font face="Helvetica" size=3 color=01382b> **Cleaning the Hyundai Dataset** <font>"""

df_hyundai = pd.read_csv("hyundi.csv")
#If want to rename column, use this one
df_hyundai.rename(columns={'engineSize': 'engine_size'}, inplace=True)
# add a new column and give the value
df_hyundai.rename(columns={ 'tax(£)': 'tax'}, inplace=True)
df_hyundai["brand"] = "Hyundai"
df_hyundai["country"] = "UK"
# reset sequence
sequence = ["brand", "model", "year", "transmission", "mileage", "fuelType", "engine_size", "tax", "mpg", "country", "price"]
df_hyundai = df_hyundai[sequence]
df_hyundai.info()
df_hyundai.head()

# assign path and file name
folder_path = 'C:\\Users\\Rick\\OneDrive\\Desktop\\BA815_project\\clean_data\\'
file_name = 'clean_hyundai.csv'
file_path = folder_path + file_name

# save dataframe as csv
df_hyundai.to_csv(file_path, index=False)
print(f'File has been saved to {file_path}')

"""###<font face="Helvetica" size=3 color=01382b> **Cleaning the Merc (Mercedes) Dataset** <font>"""

df_merc = pd.read_csv("merc.csv")
#If want to rename column, use this one
df_merc.rename(columns={'engineSize': 'engine_size'}, inplace=True)
# add a new column and give the value
df_merc["brand"] = "Merc"
df_merc["country"] = "UK"
# reset sequence
sequence = ["brand", "model", "year", "transmission", "mileage", "fuelType", "engine_size", "tax", "mpg", "country", "price"]
df_merc = df_merc[sequence]
print(df_merc.info())
print(df_merc.head())

# assign path and file name
folder_path = 'C:\\Users\\Rick\\OneDrive\\Desktop\\BA815_project\\clean_data\\'
file_name = 'clean_merc.csv'
file_path = folder_path + file_name

# save dataframe as csv
df_merc.to_csv(file_path, index=False)
print(f'File has been saved to {file_path}')

"""###<font face="Helvetica" size=3 color=01382b> **Cleaning the Skoda Dataset** <font>"""

df_skoda = pd.read_csv("skoda.csv")
#If want to rename column, use this one
df_skoda.rename(columns={'engineSize': 'engine_size'}, inplace=True)
# add a new column and give the value
df_skoda["brand"] = "Skoda"
df_skoda["country"] = "UK"
# reset sequence
sequence = ["brand", "model", "year", "transmission", "mileage", "fuelType", "engine_size", "tax", "mpg", "country", "price"]
df_skoda = df_skoda[sequence]
print(df_skoda.info())
print(df_skoda.head())

# assign path and file name
folder_path = 'C:\\Users\\Rick\\OneDrive\\Desktop\\BA815_project\\clean_data\\'
file_name = 'clean_skoda.csv'
file_path = folder_path + file_name

# save dataframe as csv
df_skoda.to_csv(file_path, index=False)
print(f'File has been saved to {file_path}')

"""###<font face="Helvetica" size=3 color= 01382b> **Cleaning the Toyota Dataset** <font>"""

df_toyota = pd.read_csv("toyota.csv")
#If want to rename column, use this one
df_toyota.rename(columns={'engineSize': 'engine_size'}, inplace=True)
# add a new column and give the value
df_toyota["brand"] = "Toyota"
df_toyota["country"] = "UK"
# reset sequence
sequence = ["brand", "model", "year", "transmission", "mileage", "fuelType", "engine_size", "tax", "mpg", "country", "price"]
df_toyota = df_toyota[sequence]
print(df_toyota.info())
print(df_toyota.head())

# assign path and file name
folder_path = 'C:\\Users\\Rick\\OneDrive\\Desktop\\BA815_project\\clean_data\\'
file_name = 'clean_toyota.csv'
file_path = folder_path + file_name

# save dataframe as csv
df_toyota.to_csv(file_path, index=False)
print(f'File has been saved to {file_path}')

"""###<font face="Helvetica" size=3 color= 01382b> **Cleaning the Vauxhall Dataset** <font>"""

df_vauxhall = pd.read_csv("vauxhall.csv")
#If want to rename column, use this one
df_vauxhall.rename(columns={'engineSize': 'engine_size'}, inplace=True)
# add a new column and give the value
df_vauxhall["brand"] = "Vauxhall"
df_vauxhall["country"] = "UK"
# reset sequence
sequence = ["brand", "model", "year", "transmission", "mileage", "fuelType", "engine_size", "tax", "mpg", "country", "price"]
df_vauxhall = df_vauxhall[sequence]
print(df_vauxhall.info())
print(df_vauxhall.head())

# assign path and file name
folder_path = 'C:\\Users\\Rick\\OneDrive\\Desktop\\BA815_project\\clean_data\\'
file_name = 'clean_vauxhall.csv'
file_path = folder_path + file_name

# save dataframe as csv
df_vauxhall.to_csv(file_path, index=False)
print(f'File has been saved to {file_path}')

"""###<font face="Helvetica" size=3 color=01382b> **Cleaning the Volkswagen Dataset** <font>"""

df_vw = pd.read_csv("vw.csv")
#If want to rename column, use this one
df_vw.rename(columns={'engineSize': 'engine_size'}, inplace=True)
# add a new column and give the value
df_vw["brand"] = "Volkswagen"
df_vw["country"] = "UK"
# reset sequence
sequence = ["brand", "model", "year", "transmission", "mileage", "fuelType", "engine_size", "tax", "mpg", "country", "price"]
df_vw = df_vw[sequence]
print(df_vw.info())
print(df_vw.head())

# assign path and file name
folder_path = 'C:\\Users\\Rick\\OneDrive\\Desktop\\BA815_project\\clean_data\\'
file_name = 'clean_vw.csv'
file_path = folder_path + file_name

# save dataframe as csv
df_vw.to_csv(file_path, index=False)
print(f'File has been saved to {file_path}')

"""###<font face="Helvetica" size=3 color=01382b> **Importing and Concatenating data from UK** <font>"""

# import UK dataset
audi = pd.read_csv("/content/clean_USA.csv")
bmw = pd.read_csv("/content/clean_bmw.csv")
ford = pd.read_csv("/content/clean_ford.csv")
hyundi = pd.read_csv("/content/clean_hyundi.csv")
merc = pd.read_csv("/content/clean_merc.csv")
skoda = pd.read_csv("/content/clean_skoda.csv")
toyota = pd.read_csv("/content/clean_toyota.csv")
vauxhall = pd.read_csv("/content/clean_vauxhall.csv")
vw = pd.read_csv("/content/clean_vw.csv")

UK_cars = pd.concat([audi, bmw, ford, hyundi, merc, skoda, toyota, vauxhall, vw], ignore_index=True)

"""####<font face="Helvetica" size=3 color=01382b> **Imputed missing "tax" values using the average for the same brand and model in UK data** <font>
---
"""

# import cclass dataset first
cclass = pd.read_csv("/content/clean_cclass.csv")
# import focus dataset first
focus = pd.read_csv("/content/clean_focus.csv")

"""#####<font face="Helvetica" size=2 color=01382b> **C-Class** <font>
---
"""

# groupby data by brand and model, then calculate the average amout of tax
UK_tax_avg = UK_cars.groupby(['brand','model'])['tax'].mean().reset_index()
# extract the exact tax I want
filter_cclass = UK_tax_avg.loc[(UK_tax_avg['model'] == ' C Class')]
avg_tax_cclass = filter_cclass["tax"]
# canvert the series to a value
avg_tax_cclass = avg_tax_cclass.values[0]
print(filter_cclass)
print(avg_tax_cclass)
# Fill the Na value in cclass
cclass["tax"] = cclass["tax"].fillna(avg_tax_cclass)
print(cclass.isnull().sum())

"""#####<font face="Helvetica" size=2 color=01382b> **Focus** <font>
---
"""

# extract the exact tax I want from the data I groupby before
filter_focus = UK_tax_avg.loc[(UK_tax_avg['model'] == ' Focus')]
avg_tax_focus = filter_focus["tax"]
# canvert the series to a value
avg_tax_focus = avg_tax_focus.values[0]
print(filter_focus)
print(avg_tax_focus)
# Fill the Na value in cclass
focus["tax"] = focus["tax"].fillna(avg_tax_focus)
focus = focus.rename(columns={"fuel_type": "fuelType"})
print(focus.isnull().sum())

"""####<font face="Helvetica" size=3 color=01382b> **Merging all UK data files** <font>
---
"""

All_UK_car = pd.concat([UK_cars, cclass, focus], ignore_index=True)
All_UK_car.isnull().sum()
#UK_cars.isnull().sum()

"""####<font face="Helvetica" size=3 color=01382b> **Coverting Price data from UK Pound to US Dollar** <font>
---
"""

# convert UK to USA in price column
UK_cars["price"] = UK_cars["price"].str.replace(",", "").str.strip()
UK_cars['price'] = UK_cars['price'].astype(float)
UK_cars["price_GBP"] = UK_cars["price"]
UK_cars.price = UK_cars.price_GBP * 1.34
UK_cars = UK_cars.drop(columns = ["price_GBP"])

# convert UK to USA in tax column
UK_cars["tax_GBP"] = UK_cars["tax"]
UK_cars.tax = UK_cars.tax_GBP * 1.34
UK_cars = UK_cars.drop(columns = ["tax_GBP"])

"""###<font face="Helvetica" size=3 color=01382b> **Import USA Dataset** <font>
---
"""

# import USA dataset
USA_cars = pd.read_csv("/content/clean_USA.csv")
print(USA_cars.info())

USA_cars["price"] = USA_cars["price"].str.replace(",", "").str.strip()
USA_cars['price'] = USA_cars['price'].astype(int)
print(USA_cars["price"])

"""####<font face="Helvetica" size=3 color=01382b> **Imputed missing values in US data for tax and mpg using the average for the same brand and model from the UK dataset** <font>

"""

print(UK_cars.brand.unique())
UK_avg_filter = UK_cars.groupby('brand').agg({'tax': 'mean', 'mpg': 'mean'}).reset_index()
UK_tax_avg = UK_cars["tax"].mean()
UK_mpg_avg = UK_cars["mpg"].mean()
#print(UK_avg_filter)

USA_filter = USA_cars.merge(UK_avg_filter, on='brand', how='left', suffixes=('', '_reference_value'))
# Filling missing 'tax' and 'mpg' with values from the reference dataframe
USA_cars["tax"] = USA_filter["tax_reference_value"]
USA_cars["mpg"] = USA_filter["mpg_reference_value"]

# fill the rest of car brand based on the average value from UK cars
USA_cars["tax"] = USA_cars["tax"].fillna(UK_tax_avg)
USA_cars["mpg"] = USA_cars["mpg"].fillna(UK_mpg_avg)

print(USA_cars.isnull().sum())

"""####<font face="Helvetica" size=3 color=01382b> **Standardizing the format of information in both the datasets** <font>





"""

USA_cars['brand'] = USA_cars['brand'].replace('Mercedes-Benz', 'Merc')

print(USA_cars.info())

"""###<font face="Helvetica" size=3 color=01382b> **Concatenating the US and UK datasets** <font>

"""

final_used_cars = pd.concat([All_UK_car, USA_cars], ignore_index= True)
#confirm there is no null value
print(final_used_cars.info())
print(final_used_cars.isnull().sum())

# standardize the fueltype column
print(final_used_cars.fuelType.unique())
final_used_cars["fuelType"] = final_used_cars["fuelType"].replace({'Gasoline': 'Petrol', 'E85 Flex Fuel': 'Petrol', 'Plug-In Hybrid' : 'Hybrid'})
print(final_used_cars.fuelType.unique())

print(final_used_cars.transmission.unique())

"""# assign path and file name
folder_path = 'C:\\Users\\Rick\\OneDrive\\Desktop\\BA815_project\\clean_data\\'
file_name = 'Final_used_cars.csv'
file_path = folder_path + file_name

# save dataframe as csv
final_used_cars.to_csv(file_path, index=False)
print(f'File has been saved to {file_path}')

###<font face="Helvetica" size=3 color=01382b> **Dropping duplicated rows** <font>
"""

# Check rows
dupliccate_rows = final_used_cars.duplicated().sum()
print(dupliccate_rows)

# drop duplicated rows
final_used_cars.drop_duplicates(inplace = True)
final_used_cars.duplicated().sum()

"""####<font face="Helvetica" size=3 color=01382b> **Dropping rows where year is equal to 0 or greater than 2024** <font>

"""

# 1. delete the rows whose year column is 0
final_used_cars = final_used_cars[final_used_cars['year'] != 0]

# 2.  delete the rows whose year column is bigger thabn 2025
final_used_cars = final_used_cars[final_used_cars['year'] <= 2025]

"""####<font face="Helvetica" size=3 color=01382b> **Dropping outliers from engine_size and mpg columns** <font>

"""

final_used_cars = final_used_cars[final_used_cars['engine_size'] <= 10]
final_used_cars = final_used_cars[final_used_cars['mpg'] < 200]

"""After our research, the mpg more than 200 almost impossible, and the engize size bigger than 10 is not usual either

#  assign path and file name
folder_path = 'C:\\Users\\Rick\\OneDrive\\Desktop\\BA815_project\\clean_data\\'
file_name = 'Final_used_cars_v2.csv'
file_path = folder_path + file_name

# save dataframe as csv
final_used_cars.to_csv(file_path, index=False)
print(f'File has been saved to {file_path}')

#<font face="Helvetica" size=6 color=02818a> **Exploratory Data Analysis & Questions  <a name="exploratorydataanalysis&questrions"></a>** <font>

----
"""

used_cars = pd.read_csv("/content/Final_version_used_cars.csv")
df = used_cars
print(used_cars.info())

# Check distribution for numeric features: price, tax, mileage,engine_size
df = used_cars
numeric_columns=df[['mileage','engine_size','tax','mpg','price']]
numeric_columns.describe()

"""
<font face="Helvetica" size=5 color=2e062f> **Correlation Analysis on All Features** <font>"""

import matplotlib.pyplot as plt
import seaborn as sns

# Set the style of the plots
sns.set(style="whitegrid")
# Split the dataframe into categorical columns and numerical columns
categorical_columns = df.select_dtypes(include=['object', 'category']).columns
numerical_columns = df.select_dtypes(include=['int32','int64','float64']).columns

# Factorize categorical columns
factorized_df = df[categorical_columns].apply(lambda x: pd.factorize(x)[0])

# Concatenate numerical columns and factorized categorical columns
combined_df = pd.concat([df[numerical_columns], factorized_df], axis=1)

# Calculate correlation matrix
corr = combined_df.corr()

# Plot a correlation heatmap
plt.figure(figsize=(10, 8))
sns.heatmap(corr, cmap ='PuBuGn', annot=True)
title_font = {'family': 'serif', 'color': 'darkred', 'weight': 'bold', 'size': 16}
plt.title("Correlation Heatmap")
plt.xticks(rotation = 45)
plt.show()

"""The key takeaway from the correlation heatmap is that the positive correlation between the prices of used cars and engine sizes is highest among the features of a used car, indicating that a vehicle with a larger engine size is associated with a higher resale price. Transmissions and years of manufacturing are also relatively correlated with resale prices. Noticeably, the country feature and car models are highly correlated because the prevalent models vary between the US and UK markets, with some models exclusive to one market.

Mileage and miles per gallon(mpg) are the only two numerical features negatively correlated to used car prices, indicating that a higher level of usage and less fuel efficiency may devalue a used car.

###<font face="Helvetica" size=5 color=01382b> **Q1. Questions regarding market facts and price trends** <font>

Our analysis mainly focuses on the price of a used car and its determinants. Before we dive deeper into the variables impacting used car prices, we would like to explore some basic patterns and features of used car prices per se.

---
#####<font color = 01382b>**Q1.1. what is the price distribution of the used cars in this dataset ?**<font>
---
"""

# Filter out extreme outliers (e.g., prices above $100,000)
filtered_df = df[df['price'] <= 100000]

# Plot the distribution
plt.figure(figsize=(10, 8))
sns.histplot(filtered_df['price'], bins=25, kde=True,color='#016c59',line_kws={'color':'#014636'})
plt.title('Distribution of Car Prices', fontdict={'fontsize':'16'})
plt.xlabel('Price')
plt.ylabel('Frequency')
plt.xlim(0)
plt.show()

"""From the histogram and probability density curve above, we can observe that the distribution of used car prices in our dataset is highly right-skewed, meaning that most car prices are concentrated at the lower end, while fewer cars have higher prices.

The highest peak of the distribution occurs between \$8,000 and \$12,000 , suggesting that most cars fall within this price range. The x-axis shows the car prices, ranging from \$0 to \$100,000. The majority of cars are priced below \$40,000, with very few cars priced above \$50,000.

---
#####<font color = 01382b>**Q1.2. what is the price fluctuation over the years ?**<font>


---
"""

#import modules fo data visualization
from bokeh.plotting import figure,show,output_notebook
from bokeh.io import output_file, show
from bokeh.models import ColumnDataSource,NumeralTickFormatter, DatetimeTickFormatter,DateRangeSlider,Whisker

# Use Bokeh in Google Colab Notebook
output_notebook()

# Group the prices by years and use medians of price to avoid the impact from outliers
df_groupby_years = df.groupby('year')['price'].median().reset_index()
df_groupby_years.rename(columns={'price': 'median_price'}, inplace=True)
source = ColumnDataSource(data=df_groupby_years)

# Create hovering-over tools
TOOLTIPS =  [
    ("Year", "@year"),
    ("Price", "@median_price{$0,0}")
]

# Plot the line chart
fig = figure(x_axis_label = 'Year',y_axis_label ='Median of price', title='Price Fluctuation 1970-2024',x_range=(1970,2026),tooltips=TOOLTIPS, width=900,height=600)
fig.title.align = 'center'
fig.title.text_font_size = '16pt'
fig.line(x='year', y='median_price',source=source,line_width=4,line_color= '#016c59' ,line_alpha= 0.6)
fig.scatter(x='year',y='median_price',source=source, color='#014636', size=5)
fig.yaxis.formatter = NumeralTickFormatter(format="$0,0")

show(fig)

"""The historical price fluctuation indicates that used car price changes could be fundamentally impacted by unprecendent macroeconomic events.

Even though the year data in this dataset is the year of manufacture, we can still use it as an indicator of resale timing.In the line chart above, the price starts to surge drastically from 2018, possibly due to a resale of cars manufactured from 2018 during the Covid-19 period.

Based on our research,the onset of the COVID-19 pandemic in early 2020 brought about major disruptions to almost every sector of the industry, including the automotive industry. With lockdowns, supply chain disruptions, and a sharp downturn in the economy, car sales plummeted, both in the new and used markets.However, an unexpected trend emerged as the year progressed. As people sought alternatives to public transportation and embraced the concept of personal mobility, demand for used cars surged.The pandemic-induced shift in consumer wants and needs, coupled with production delays in the new car market, led to a scarcity of new vehicles. This then caused a direct correlation in the used market, as used car sales surged, especially in private sales through websites or local advertisements.



Reference: The impact of pandemics on used car prices
https://www.goodcarbadcar.net/the-global-pandemic-its-impact-on-the-used-car-market/

---
#####<font color = 01382b>**Q1.3. What are the most popular 10 brands and their price distributions ?**<font>


---
"""

# Identify the most popular 10 brands by list frequencies
# Count the frequency of each brand
brand_counts = df['brand'].value_counts().reset_index()
brand_counts.columns = ['brand', 'counts']
brand_counts = brand_counts.sort_values(by='counts', ascending=False)

# Identify the top 10 brands
top10_brands = brand_counts[:10]

# Replace all brands that are not in the top 10 with 'Others'
df_top10 = df.copy()
df_top10['brand'] = df['brand'].apply(lambda x: x if x in list(top10_brands['brand']) else 'Others')

# Drop the rows of 'Others' brands
df_top10 = df_top10[df_top10['brand'] != 'Others']

# Apply log transformation to the 'price' column to reduce the effect of outliers
df_top10['log_price'] = np.log1p(df_top10['price'])

# Plotting the boxplot again using the transformed 'log_price'
plt.figure(figsize=(10,8))
sns.boxplot(x='brand', y='log_price', data=df_top10, order=top10_brands['brand'], \
            palette='PuBuGn', hue='brand',saturation=0.7)
plt.title('Distribution of Log-Transformed Car Prices for top 10 brands',fontdict={'fontsize':'16'})
plt.xlabel('The Top 10 Brands')
plt.ylabel('Price')
plt.xticks(rotation=45)
plt.show()

"""Key takeaways:
   - **Chevrolet** stands out for having **the highest median price** among the brands. Its overall range extends notably higher than the others, suggesting that Chevrolet's offering in this dataset includes more high-priced vehicles.
   - **Vauxhall** has **the lowest median price**, which suggests that it is the most affordable option among these brands, indicating a focus on budget-friendly vehicles.
   - There are numerous outliers in most brands, particularly on the lower end, which might indicate the presence of used or significantly discounted cars that have been log-transformed.
   - **Ford**, **Toyota**, and **Skoda** show multiple outliers on the lower end of the price spectrum, indicating the availability of more economical models. These brands seem to cater to price-sensitive customers and offer entry-level options.
   - Luxury brands (**Audi, BMW, Merc**) dominate the higher price ranges and exhibit more variability in their prices.
   - The **distribution patterns** highlight the differentiation between brands and indicate the general market segementations:
     - **Chevrolet**, **BMW**, **Audi**, and **Mercedes-Benz** are brands that generally target the higher end of the market.
     - **Ford**, **Toyota**, and **Vauxhall** are positioned more towards the mass market, with a focus on affordability.
     - **Volkswagen**, **Skoda**, and **Hyundai** occupy a middle ground, with prices between the more affordable brands and the luxury segment.

---
#####<font color = 01382b>**Q1.4. Is there any difference in price patterns between the US and UK markets of used cars ?**<font>


---
"""

# Filter the most popular brands that available in both UK and USA
UK_car = used_cars[used_cars['country'] == 'UK']
UK_car = UK_car[UK_car["brand"].isin(top10_brands['brand'])]
USA_car = used_cars[used_cars['country'] == 'USA']
USA_car = USA_car[USA_car["brand"].isin(top10_brands['brand'])]

# Groupby prices by the common brands
mid_UK_car = UK_car.groupby("brand")["price"].median().reset_index()
mid_USA_car = USA_car.groupby("brand")["price"].median().reset_index()
mid_UK_car = mid_UK_car.rename(columns = {"price" : "price_UK"})
mid_USA_car = mid_USA_car.rename(columns = {"price" : "price_USA"})

# Merge datasets of the two markets on the common brands
mid_car_price = mid_UK_car.merge(mid_USA_car, on = "brand", how = 'inner')

# Create the figure
plt.figure(figsize=(10, 8))
bar_width = 0.35
index = range(len(mid_car_price))

# Plotting barchart of the UK prices
plt.bar(index, mid_car_price['price_UK'], bar_width, label='Price in UK', color="#3690c0")

# Plotting the USA prices with an offset
plt.bar([i + bar_width for i in index], mid_car_price['price_USA'], bar_width, label='Price in USA', color="#016c59")

# Adding labels and title
plt.xlabel('Car Brands')
plt.ylabel('Price:US dollars')
plt.title('Car Prices in UK vs USA')
plt.xticks([i + bar_width / 2 for i in index], mid_car_price['brand'])
plt.legend()

# Show plot
plt.tight_layout()
plt.show()

"""To answer the question above, we filter the brands that are available in both the USA and the UK, group the data by these brands, and calculate the median values for the common brands in each market.  Based on the chart, it is surprising that both Luxury brands (e.g., Audi, BMW, Merc) and mass-market brands (e.g., Ford, Toyota, Volkswagen) have consistently higher prices in the USA compared to the UK. Particularly, Ford, the USA car brand, sell at a higher price in USA than in UK. This trend may reflect factors like different tax structures, import tariffs, market positioning strategies, or general differences in the automotive market conditions in the two regions.

Although the prices are generally higher in the US market, the price differences in mass-market brands, like Ford and Toyata, are more profound than the luxury brands, which may indicate more model offerings and more price sensitivity in the mass market.

##<font face="Helvetica" size=5 color=01382b> **Q2. How does the vehicle condition affect price?** <font>

---
#####<font color = 01382b>**Q2.1. What is the relationship between the mileage and price based on fuel type?**<font>


---
"""

from bokeh.plotting import figure, show
from bokeh.io import output_notebook
from bokeh.models import ColumnDataSource, HoverTool
from bokeh.transform import factor_cmap
from bokeh.palettes import PuBuGn3, PuBuGn4, PuBuGn5

# Prepare the data
df2 = df.copy()
df2['log_price'] = np.log(df2['price'])
df2 = df2[~((df2['fuelType'] == 'Electric') | (df2['fuelType'] == 'Other'))]

palette = ['#ece2f0', '#3690c0', '#014636']

# Output to notebook (if you're in Jupyter)
output_notebook()

# Create a ColumnDataSource
source = ColumnDataSource(df2)

# Create the figure with wheel zoom tool
p = figure(title='Scatter plot of Log-Transformed Car Prices for Mileage',
           x_axis_label='Mileage', y_axis_label='Log Price',
           tools='pan,box_zoom,reset,wheel_zoom', active_scroll='wheel_zoom')

# Create color mapping for the 'fuelType' column
fuel_types = df2['fuelType'].unique().tolist()
color_map = factor_cmap('fuelType', palette=palette, factors=fuel_types)

# Create scatter plot
p.circle(x='mileage', y='log_price', source=source, size=8, color=color_map, legend_field='fuelType', alpha=0.6)

# Add hover tool
hover = HoverTool()
hover.tooltips = [("Mileage", "@mileage"), ("Log Price", "@log_price"), ("Fuel Type", "@fuelType")]
p.add_tools(hover)

# Customize legend
p.legend.title = 'Fuel Type'
p.legend.location = 'top_right'

# Rotate x-axis labels
p.xaxis.major_label_orientation = 0.65

# Show the plot
show(p)

"""The key takeaway from this chart is the observed inverse relationship between mileage and price, as corroborated by the correlation heatmap. Vehicles with higher mileage tend to be priced lower, reflecting their condition; increased mileage often leads to a greater need for maintenance and repairs.

Additionally, the data indicates that diesel vehicles depreciate at a faster rate after surpassing 100,000 miles compared to petrol vehicles. Interestingly, petrol cars exhibit higher price points than hybrid cars at lower mileage levels, contradicting established research trends that suggest hybrid vehicles should command premium pricing due to their advanced technology. Moreover, hybrid vehicles demonstrate significantly lower mileage compared to their petrol and diesel counterparts, further deviating from expected data trends.

This discrepancy highlights the necessity for further research, particularly to incorporate a more comprehensive dataset on used hybrid car sales. Such an investigation would help determine the validity and significance of our current insights.

---
#####<font color = 01382b>**Q2.2. Which popular fuel type (diesel or petrol) offers better mileage efficiency amongst top brands?**<font>


---
"""

import matplotlib.pyplot as plt
import pandas as pd

# Sample filtered_used_cars data (ensure 'brand', 'mileage', 'fuelType', 'price' are part of your actual dataset)
filtered_used_cars = used_cars[used_cars['fuelType'].isin(['Petrol', 'Diesel'])]

# Create mileage buckets
bins = [0, 25000, 50000, 75000, 100000, 125000, 150000]
labels = ['0-25000', '25000-50000', '50000-75000', '75000-100000', '100000-125000', '125000-150000']
filtered_used_cars['mileage_bucket'] = pd.cut(filtered_used_cars['mileage'], bins=bins, labels=labels, right=False)

# Get the top 4 brands
top_brands = filtered_used_cars['brand'].value_counts().nlargest(4).index
df_top_brands = filtered_used_cars[filtered_used_cars['brand'].isin(top_brands)]

# PuBuGn color palette for Petrol and Diesel
pubugn_palette = ['#2b8cbe', '#a6bddb']  # Petrol: #2b8cbe, Diesel: #a6bddb

# Plotting
fig, axes = plt.subplots(2, 2, figsize=(15, 10), sharey=True)
axes = axes.flatten()

# Iterate through top brands
for i, brand in enumerate(top_brands):
    df_brand = df_top_brands[df_top_brands['brand'] == brand]
    grouped_brand = df_brand.groupby(['mileage_bucket', 'fuelType']).agg({'price': 'mean'}).unstack()

    # Use PuBuGn colors for Petrol and Diesel
    grouped_brand.plot(kind='bar', ax=axes[i], color=[pubugn_palette[0], pubugn_palette[1]])

    axes[i].set_title(f'Mean Price vs Mileage for {brand}')
    axes[i].set_ylabel('Mean Price')
    axes[i].set_xlabel('Mileage Bucket')
    axes[i].legend(['Petrol', 'Diesel'], title="Fuel Type")  # Move the legend inside the loop for each axis

# Adjust layout
plt.tight_layout()
plt.show()

"""Our hypothesis suggests that diesel vehicles, despite their efficiency and durability, typically experience higher depreciation, resulting in lower prices compared to petrol vehicles with similar mileage. To test this, we analyzed the average prices across mileage ranges for the top four brands with the most listings.
The results largely supported our hypothesis, with petrol vehicles consistently priced higher for three out of the four brands. However, Mercedes-Benz (Merc) contradicted this trend, likely because many of its European SUVs and C-Class models run on diesel, where demand for diesel engines is stronger and maintains their value.

Several factors may explain the supporting results:

Seller pricing strategies: Some sellers price diesel vehicles lower, aiming for a quick sale, especially since diesel cars tend to have higher longevity if maintained well.
Regional demand: In markets like the UK, demand for diesel cars has dropped following the 2015 emissions scandal, causing petrol vehicles to command higher prices.
Vehicle types: Luxury cars, typically petrol-powered, are priced higher due to smoother performance, while diesel engines are more common in pickup trucks for their efficiency.

---
#####<font color = 01382b>**Q2.3. What are the trends and distribution of mileage for used cars manufactured after 2000?**


---
"""

import pandas as pd
import seaborn as sns
import matplotlib.pyplot as plt



# Prepare the DataFrame for bubble plotting
milyr = df[['mileage', 'year', 'price']]
milyr = milyr[milyr['year'] >= 2000]


# Create quantile labels based on price
milyr['quantile'] = pd.qcut(milyr['price'], q=4, labels=['450-10259', '10260-14799', '14800-21249', '21250-2954083'])

# Create a FacetGrid to plot subplots based on the quantile column
g = sns.FacetGrid(milyr, row='quantile', height=3, aspect=2)

custom_palette = ['#014636', '#02818a', '#67a9cf', '#d0d1e6']
# Map a scatter plot to each facet
g.map_dataframe(sns.scatterplot, x='year', y='mileage', hue ='quantile', palette = custom_palette, alpha=0.6)

# Set titles and labels for each subplot
g.set_titles(col_template='Price Quartile: {col_name}')
g.set_axis_labels('Year', 'Mileage')
# g.add_legend(title='Price', bbox_to_anchor=(1, 1))

# Show the plot
plt.subplots_adjust(top=0.9)
g.fig.suptitle('Mileage vs Year by Price Quartile after 2000')
plt.show()

"""In the above graphs, we observe that vehicles in the lowest price quartile (Q1) are predominantly manufactured between 2005 and 2010. These vehicles exhibit the greatest variation in mileage, likely due to their age, with usage patterns varying widely across multiple previous owners. Similarly, vehicles in Q2 are mostly manufactured between 2010 and 2015, while those in Q3 are from 2015 to 2020. This trend suggests an inverse relationship between year of manufacture and mileage, with newer cars typically having lower mileage.

However, in Q4, representing the highest price range, cars tend to have significantly lower mileage and fewer outliers. Most of these vehicles are concentrated between 2015 and 2020, showing a general trend of lower mileage in newer, higher-priced vehicles, with a noticeable decline in mileage after 2020.

##<font face="Helvetica" size=5 color=01382b> **Q3. How do vehicle specifications impact car prices?** <font>

---
#####<font color = 01382b>**Q3.1. Does engine_size show a positive correlation with car price based on the previous correlation matrix?**


---
"""

# Price VS mileage, across fuel types
df['log_price'] = np.log1p(df['price'])  # Using log1p to handle small price values
plt.figure(figsize=(18, 10))
#sns.scatterplot(x='mileage', y='log_price', data=df, hue = df["fuelType"])
df_filter = df[df["engine_size"] != 0]
sns.regplot(x='engine_size', y='log_price', data=df_filter, scatter_kws = {"color": '#a6bddb', "alpha": 0.5}, line_kws = {"color": '#02818a'})
plt.title('Scatter plot of Log-Transformed Car Prices for engine size')
plt.xlabel('Engine_size')
plt.ylabel('Log Price')
plt.xticks(rotation=65)
plt.show()

"""There is a Positive Correlation between Engine Size and Price. As engine size increases, the price tends to rise. However, despite the trend, there is significant variability in prices for a given engine size. This means that factors other than engine size likely influence car prices.

Another interesting point is that for larger engine sizes, points deviate significantly from the trend, indicating those outliers may represent luxury or high-performance vehicles with disproportionately high prices.

---
#####<font color = 01382b>**Q3.2. How does the relationship between engine size and car price vary across different transmission types?**


---
"""

import seaborn as sns
import numpy as np
import matplotlib.pyplot as plt
df_jay = df
# Prepare the data by adding a log-transformed price column
df_jay['log_price'] = np.log1p(df_jay['price'])  # Log-transform the price column

# Filter out rows with zero engine_size
df_filtered = df_jay[df_jay['engine_size'] != 0]

df_filtered = df_filtered[~ (df_filtered['transmission']== 'Other')]

# Set up a FacetGrid for a 2x2 grid layout (based on transmission type)
g = sns.FacetGrid(df_filtered, col='transmission', height=5, aspect=1.2, col_wrap=2)
g.map(sns.scatterplot, 'engine_size', 'log_price', alpha=0.5, color="#ece2f0")

# Add a regression line to each subplot
g.map(sns.regplot, 'engine_size', 'log_price', scatter=False, line_kws={"color": '#67a9cf'})

# Add titles and labels
g.set_axis_labels('Engine Size', 'Log Price')
g.set_titles(col_template="{col_name} Transmission")
plt.subplots_adjust(top=0.85)
g.fig.suptitle('Engine Size vs Log Price by Transmission Type')

# Show the plot
plt.show()

"""This plot shows a positive trend across all transmission categories, though the strength of the correlation varies. In manual, automatic, and semi-automatic transmissions, there is a noticeable upward trend, with higher engine sizes generally corresponding to higher prices. The variability in prices increases as engine size grows, particularly in the automatic and semi-automatic categories, suggesting that other factors, such as brand, or market demand, play a role in price determination.
The clear positive correlation in the other transmission types supports the conclusion that larger engines are associated with higher vehicle prices, but other factors still contribute to price variability.

---
#####**<font color = 01382b>Q3.3. Which MPG ranges should sellers target for high-priced vehicles? Is there a specific MPG range where sellers might struggle to achieve high prices?**


---
"""

bins = range(0, 191, 10)
df_jay = df
df_jay['mpg_binned'] = pd.cut(df_jay['mpg'], bins=bins, right=False)

grouped = df_jay.groupby('mpg_binned')['price'].mean()

#Plotting the average price per MPG bin
plt.figure(figsize=(10, 6))
grouped.plot(kind='bar', edgecolor='black', color = '#ece2f0' )

#Customizing x-ticks to display the ranges "0-10", "10-20", etc.
xticks_labels = [f"{int(interval.left)}-{int(interval.right)}" for interval in grouped.index]
plt.xticks(ticks=range(len(xticks_labels)), labels=xticks_labels, rotation=45)

#Adding labels and title
plt.xlabel('MPG (in buckets of 10)')
plt.ylabel('Average Price')
plt.title('Average Price per MPG Range')

#Displaying the plot
plt.tight_layout()
plt.show()

"""Our analysis reveals that sellers should prioritize cars with MPG values in the ranges of 100–110 and 0–10, as these categories consistently command the highest average prices. These segments likely include high-end or luxury vehicles that tend to perform well, driven by their extreme fuel economy profiles. The elevated prices in these ranges suggest that sellers can anticipate greater profit margins, making these categories particularly lucrative for maximizing revenue.
Furthermore, the analysis indicates that vehicles with an MPG range of 50–80 tend to have the lowest average prices, making it challenging for sellers to secure higher profits in this fuel efficiency segment. To enhance profitability, sellers could consider offering bundled services like extended warranties, flexible financing options, or certified pre-owned programs. These added benefits could attract buyers who are willing to pay a bit more for the reassurance and value these services provide.

##<font face="Helvetica" size=5 color=01382b> **Q4. How important are sustainability initiatives for vehicle price?** <font>

---
#####<font color = 01382b>**Q4.1. How do hybrid vehicles perform as compared to hazardous fuels like petrol and diesel?**


---
"""

car = used_cars.copy()
car = car[~((car['fuelType'] == 'Electric') | (car['fuelType'] == 'Other'))]
fuel = car.groupby('fuelType')[['mpg', 'price']].agg({'mpg':'mean', 'price':'mean'})
fig, axes = plt.subplots(1, 2, figsize=(14, 6))
sns.barplot(x='fuelType', y='mpg',hue= 'fuelType', data=car, ax=axes[0], palette='PuBuGn')
axes[0].set_title('Mean MPG by Fuel Type')
axes[0].set_ylabel('Mean MPG')
axes[0].set_xlabel('Fuel Type')

# Bar plot for median price by fuel type
sns.barplot(x='fuelType', y='price',hue='fuelType', data=car, ax=axes[1], palette='PuBuGn')
axes[1].set_title('Mean Price by Fuel Type')
axes[1].set_ylabel('Mean Price')
axes[1].set_xlabel('Fuel Type')

# Rotate x-axis labels for better readability
for ax in axes:
    ax.tick_params(axis= 'x', rotation=45)

plt.show()

"""From a seller's perspective, hybrid vehicles stand out as the optimal choice in both fuel efficiency (measured in miles per gallon, or mpg) and pricing, highlighting their superior performance compared to other fuel types. This trend reflects the increasing consumer demand for environmentally friendly options, which has gained traction since the 2010s due to heightened awareness of climate change. As a result, sellers have the opportunity to capitalize on this demand by pricing hybrid vehicles at a premium.

However, it's crucial to recognize that petrol and diesel vehicles are often perceived as more affordable, which may limit their potential selling prices. By focusing on the advantages of hybrid vehicles, sellers can strategically position them in the market to attract environmentally conscious buyers willing to invest in better fuel efficiency and lower emissions.

---
#####<font color = 01382b>**Q4.2. How Important Are Sustainability Considerations for Sellers?**


---
"""

import plotly.express as px
import pandas as pd

# Exclude Electric and Other Fuel Types
filtered_df = df[~df['fuelType'].isin(['Electric', 'Other'])]

# Add Consistent Color Palette
color_palette = {
                'Petrol': '#3690c0',
                'Diesel': '#a6bddb',
                'Hybrid': '#014636',
                }

# Create Interactive Scatterplot
fig = px.scatter(
                  filtered_df,
                    x = "mpg",
                    y = "engine_size",
                    color = "fuelType",
                    hover_name = "brand",
                    title = "Hybrid Cars: The Leading Choice for Sustainability",
                    color_discrete_map=color_palette
                 )
# Add labels
fig.update_layout(
                  xaxis_title = "Miles Per Gallon",
                  yaxis_title = "Engine Size (liters)",
                  showlegend = True,
                  legend_title_text = "Fuel Type",
                  plot_bgcolor='white',
                  paper_bgcolor='white'
                  )

fig.show()

"""Sustainability efforts are highly important for sellers to consider because of the recent upward trend of environmentally conscious car options. This scatterplot highlights key insights into sustainable car choices based on high mpg and small engine size, with brands like Mercedes, BMW, Skoda, Volkswagen, and Audi standing out as offering environmentally friendly options. Vehicles with these features, represented by the dark green data points on the right-hand side, reflect a commitment to fuel efficiency and lower emissions. Additionally, hybrid cars emerge as the most sustainable fuel type, striking the ideal balance between engine size and mpg. Beyond the data, research shows that hybrid vehicles offer cost savings on fuel, reduced pollution, and fewer mechanical issues, making them an attractive choice for environmentally conscious consumers. It's important to note that we excluded "electric" and "other" fuel types from the analysis due to insufficient data points for electric cars and the lack of clarity around what constitutes "other" fuel types, ensuring accurate conclusions without assumptions.

##<font face="Helvetica" size=5 color=01382b> **Q5. What Key Factors Influence Price Forecasting the most in the Used Car Market?** <font>

**Splitting data into train and test**

Given that there are thousands of different car models in the U.S. used car market, we removed the model column from the prediction process.
Including this variable would introduce excessive noise, potentially disrupting the accuracy of the predictions.
"""

df = pd.read_csv("/content/Final_version_used_cars.csv")

from sklearn.model_selection import train_test_split
from sklearn.preprocessing import LabelEncoder
dy = df['price']
dx = df.drop(['price', 'model'], axis = 1)

# Separate categorical, numeric, and one-hot encoding columns
label_columns = ['brand', 'transmission', "fuelType", "country"]
numeric_columns = ['year', 'mileage', 'engine_size', "tax", 'price']


# apply Label Encoding to categorical columns
label_encoder = LabelEncoder()
for col in label_columns:
    dx[col] = label_encoder.fit_transform(dx[col])


print(dx)

dx_train, dx_test, dy_train, dy_test = train_test_split(dx, dy, test_size = 0.3, random_state = 42)

"""**Fitting and Evaluating the Model to different models:**

Linear Regression
"""

#Linear regression
from sklearn.linear_model import LinearRegression
from sklearn.metrics import mean_squared_error, r2_score
lr = LinearRegression()
lr.fit(dx_train, dy_train) #
predictions_lr=lr.predict(dx_test)

# test model
mse = mean_squared_error(dy_test, predictions_lr)
r2 = r2_score(dy_test, predictions_lr)
print("Lr's mse is ")
print(mse)
print("Lr's R score is")
print(r2)

"""Random Forest"""

from sklearn.ensemble import RandomForestRegressor
RFR=RandomForestRegressor()
RFR.fit(dx_train, dy_train)
predictions_rfr=RFR.predict(dx_test)


mse = mean_squared_error(dy_test, predictions_rfr)
r2 = r2_score(dy_test, predictions_rfr)
print("RFR's mse is ")
print(mse)
print("RFR's R score is")
print(r2)

"""As expected, the performance of linear regression was worse than that of Random Forest regression, since the relationship between price and the independent variables is not easily captured by a linear model. However, we believe that the model type is an important variable for predicting price. Therefore, we removed the U.S. data, as nearly all the car models that appeared only once were from the U.S. dataset. These rare models could have negatively impacted the accuracy of our predictions.

**Using the UK dataset for forcasting price**
"""

df_UK = df[df["country"] == 'UK']
dy = df_UK['price']
dx = df_UK.drop(['price'], axis = 1)
#dx_encoded = pd.get_dummies(dx)
# Separate categorical, numeric, and one-hot encoding columns
label_columns = ['brand', 'transmission', "fuelType", "country"]
numeric_columns = ['year', 'mileage', 'engine_size', "tax", 'price']
one_hot_encode_columns = ["model"]

# apply Label Encoding to categorical columns
label_encoder = LabelEncoder()
for col in label_columns:
    dx[col] = label_encoder.fit_transform(dx[col])


dx_encoded = pd.get_dummies(dx, columns=one_hot_encode_columns)
print(dx_encoded)

dx_train, dx_test, dy_train, dy_test = train_test_split(dx_encoded, dy, test_size = 0.3, random_state = 42)

"""Linear Regression"""

#Linearregression
from sklearn.linear_model import LinearRegression
from sklearn.metrics import mean_squared_error, r2_score
lr = LinearRegression()
lr.fit(dx_train, dy_train) #
predictions_lr=lr.predict(dx_test)

# test model
mse = mean_squared_error(dy_test, predictions_lr)
r2_linear = r2_score(dy_test, predictions_lr)
print("Lr's mse is ")
print(mse)
print("R squared value of our Linear regression model is ")
print(r2_linear)

"""Random Forest"""

from sklearn.ensemble import RandomForestRegressor
RFR=RandomForestRegressor()
RFR.fit(dx_train, dy_train)
predictions_rfr=RFR.predict(dx_test)


mse = mean_squared_error(dy_test, predictions_rfr)
r2_RF = r2_score(dy_test, predictions_rfr)
print("RFR's mse is ")
print(mse)
print("R squared value of our random forest model is ")
print(r2_RF)

"""The performances of the both forecasting model increases significantly, especially Random Forest model.

---
#####<font color = 01382b>**Q5.1. How Well Does the Forecasting Model Perform?**


---

To answer this question, we utilize Random Forest regression model, which performs the best, to grpgh a plot to answer the question.
This plot shows a distribution of residuals.
"""

# plot graph to show the performances
import matplotlib.pyplot as plt
import seaborn as sns


# residual plot
residuals = dy_test - predictions_rfr
plt.figure(figsize=(10, 8))
sns.histplot(residuals, bins=30, kde=True, color='#a6bddb')
plt.title("Residuals Distribution")
plt.xlabel("Residuals")
plt.ylabel("Frequency")

# Set x-axis limits
plt.xlim(-20000, 20000)

plt.show()

"""There is a peak near zero, indicating a significant portion of the residuals are small, suggesting good model accuracy.
Besides, The distribution appears to be skewed to the right (positively skewed), meaning there are a few large positive
residuals, but most residuals are near zero or slightly negative.

---
#####<font color = 01382b>**Q5.2. What are the key features that contribute to the success of a high-performing predictive model?**


---
"""

# feature importance plot

# extract important features from model
importances = RFR.feature_importances_
feature_names = dx_train.columns

# we only find the top 10 features
top_10 = 10
indices = np.argsort(importances)[::-1][:top_10]
top_features = feature_names[indices]  # 前the name of top 10
top_importances = importances[indices]  # the value of top 10

plt.figure(figsize=(10, 8))
plt.title(f"Top {top_10} Feature Importance")
plt.bar(range(top_10), top_importances, align="center",color= '#016c59')
plt.xticks(range(top_10), top_features, rotation=90)
plt.xlabel("Features")
plt.ylabel("Importance")
plt.tight_layout()
plt.show()

"""engine_size is the most important feature, with the highest importance value, over 0.4, followed by mileage, year, mpg.
Other features like brand, transmission, model_A Class, model_C Class, tax, and fuelType have much lower importance values, with the lowest being close to zero.

###<font face="Helvetica" size=5 color=01382b> **Summary of EDA** <font>
----

From the sellers' perspective, prices of used cars are the main focus of our analysis. We checked the correlations between all features by converting categorical variables into numerical ones to explore the underlying patterns of association between prices and other features of cars.
1. Price trend：After understanding the basic relationships between price and other variables, we moved forward to the price distribution by creating a histogram with the Kernel Density Estimation curve and found the majority of prices concentrated on the lower end of prices. Then by creating a time-series line chart, we discovered the profound surge in used car prices driven by the pandemic. After checking the price distributions across the top 10 brands in terms of sales, we finally explored the difference in price patterns in the US and UK markets by comparing the median prices of the most popular brands in both markets. The bar charts demonstrated consistently higher prices in the US, possibly indicating different model offerings, diverse market positioning strategies by these brands, etc.

2. Condition: We explored how mileage and year of manufacture affect used vehicle prices, focusing on their relationship with fuel type. First, we used a scatterplot to examine the correlation between mileage and price for different fuel types, revealing a moderate negative correlation—prices generally decrease as mileage increases, with petrol vehicles showing higher prices than diesel. To dive deeper, we analyzed this relationship further by creating bar charts for the top 4 car brands, grouping mileage into bins. This showed that petrol cars generally maintain higher prices across different mileage ranges. Finally, a scatterplot comparing mileage and year against price showed that older cars tend to have higher mileage, leading to lower prices overall.
3. Capacity: Our analysis reveals several key factors that influence car prices. Engine size shows a positive correlation with price across most transmission types, though the strength of this relationship varies, particularly with manual, automatic, and semi-automatic transmissions. Larger engine sizes tend to command higher prices, but the variability indicates that other elements, such as brand and market demand, also play significant roles in determining price. Additionally, MPG range significantly impacts car pricing, with the highest average prices seen in vehicles with MPG values of 100–110 and 0–10, often representing luxury or high-performance models. Conversely, vehicles in the 50–80 MPG range tend to have the lowest average prices, presenting challenges for sellers to achieve high profits.
4. Sustainability: Our visualizations reveal that hybrid model cars are the most environmentally friendly option, thanks to their high miles per gallon (MPG) ratings and smaller engine sizes. This makes them an excellent choice for consumers seeking to reduce fuel costs over time while also minimizing their carbon footprint. Notably, hybrid cars have the highest average MPG compared to petrol and diesel vehicles, meaning they use significantly less fuel to cover greater distances. While hybrids typically come at a premium—around $5,000 more than traditional fuel types—their long-term savings on fuel and reduced environmental impact make them an appealing option for consumers committed to sustainability.
5. Model forecasting: The model's strong reliance on a few key features like engine size and mileage ensures good overall accuracy, as seen from the residuals clustered around zero. However, its weaker consideration of other features might result in occasional large errors (positive residuals), where certain outlier cars with specific attributes (such as unique brands or advanced transmissions) aren't properly accounted for, causing overestimation in those cases.
Thus, the integration of both graphs suggests that the model generally performs well but could potentially benefit from better balancing feature importance or incorporating more nuanced adjustments to account for the lesser but sometimes impactful features.

#<font face="Helvetica" size=6 color=02818a> **Conclusion <a name="conclusions"></a>** <font>

----

This project has provided valuable insights into car pricing trends, particularly fuel type, mileage, and vehicle specifications like engine size and MPG. Our analysis highlighted that sellers can command higher prices for vehicles with lower mileage, especially hybrid cars, which tend to offer higher fuel efficiency and align with the growing focus on sustainability. Furthermore, offering bundled services like extended warranties and financing options could enhance profitability, particularly for vehicles with mid-range MPG values.

###<font face="Helvetica" size=5 color=01382b> **Recommendations** <font>
----

Based on our findings, we recommend that sellers price their vehicles more competitively based on key attributes such as engine size and mileage. This practical approach can help sellers to better position their vehicles in the market. Vehicles with lower mileage, especially hybrids, can command significantly higher prices, as hybrid vehicles generally offer better fuel efficiency. As sustainability becomes a key factor for consumers, sellers of hybrid vehicles are well-positioned to benefit. For cars with moderate MPG values (between 50 and 80), sellers can increase profitability by offering bundled services, such as extended warranties or financing options, which add value for buyers. Understanding how vehicle characteristics like engine size and MPG affect pricing will enable sellers to implement more effective pricing strategies and maximize their returns.

###<font face="Helvetica" size=5 color=01382b> **Future Steps** <font>
----

We recommend further exploration of several key areas. First, we could consider incorporating more data from the USA, as our dataset is currently dominated by UK data. A broader geographical scope could help capture regional market differences more effectively. Additionally, gathering more data on hybrid and electric vehicles would be essential, as these vehicles represent the future of the automotive market. To track market trends more accurately, we could collect resale prices of used cars over time to examine the long-term impact of events like the pandemic on the second-hand car market. This adaptable approach could provide sellers with better insights into pricing strategies for various conditions. Moreover, developing a user-friendly interface integrated with machine learning models could make the results of this project more applicable to real-world scenarios, ensuring their relevance in a rapidly changing market. Another avenue for future exploration would be categorizing vehicles based on standards like the Euro Car Segment or the US EPA Size Class. This would allow for more targeted analyses and refined pricing recommendations.

#<font face="Helvetica" size=6 color=02818a> **Challenges<a name="challenges"></a>** <font>

----

In this project, we faced various challenges during the data cleaning and analysis stages, particularly due to the complexity of handling 12 raw datasets. Despite these initial difficulties, we successfully cleaned and merged all datasets through collaborative effort. With limited columns available, our exploratory data analysis (EDA) opportunities were constrained, but team brainstorming allowed us to achieve our goals.

We also struggled with advanced visualization tools like Plotly and Bokeh, but after a period of trial and error, we mastered them and produced visualizations that effectively addressed our analysis questions. A key challenge arose due to the imbalance in nameplates between the US and UK datasets. To overcome this, we focused on common features like engine size and concentrated on the top vehicle brands shared across both markets.

In terms of sustainability, hybrid fuel types were the only clear indicator in the dataset, as the lack of detailed information on "Other" fuel types and the single electric vehicle (EV) present limited our ability to make robust conclusions. Given that EVs were underrepresented and usually sold through dealerships, we decided to focus solely on hybrid vehicles, acknowledging that this limits our ability to make comprehensive sustainability recommendations.

#<font face="Helvetica" size=6 color=02818a> **References<a name="reference"></a>** <font>

----

* Car engine sizes explained:
  1.https://www.carwow.co.uk/guides/choosing/what-engine-size-do-i-need-0521#gref

  2.What Engine Size do I need?: https://www.inchcape.co.uk/blog/what-size-engine-do-i-need/?srsltid=AfmBOopyXqWtczy9rexAGMTYxSQcoK5YUXm-QqPENaEfAl1549Pz4eGG


* Engine size conversion chart: https://www.cjponyparts.com/resources/engine-size-chart?srsltid=AfmBOoptnLJ8H7BknSmYM8FATG8py7YvqI5qAB0Kf8MEw9mb0cZ6Vz4v


* Diesel engines can be up to 40% more efficient than petrol engines:
https://www.acea.auto/fact/differences-between-diesel-and-petrol/

* Imapct of Fuel Type on Car: https://motorway.co.uk/sell-my-car/guides/does-fuel-type-impact-the-value-of-your-car

* Maintenance and Mileage: https://www.sofi.com/learn/content/buying-a-high-mileage-car/#:~:text=Maintenance%20costs%3A%20A%20high%2Dmileage,by%20the%205%2Dyear%20mark.

* Impact of Pandemic on Car Prices: https://www.goodcarbadcar.net/the-global-pandemic-its-impact-on-the-used-car-market/

* Steps For Success when Selling a Used Car: https://www.kbb.com/car-advice/how-to-sell-a-car-10-steps-for-success/

* Best Online Sites to Use when Selling a Used Car: https://www.caranddriver.com/auto-loans/a41556456/best-sites-sell-car-online/

* Diesel Cars last longer than Petrol: https://www.hotshotsecret.com/3-reasons-modern-diesel-engines-last-longer/#:~:text=2.,cylinder%20wear%20than%20gasoline%20engines

* Historically Mercedes dominated with diesel engines: https://emercedesbenz.com/autos/mercedes-benz/classic/mercedes-benz-history-diesel-passenger-car-premiered-75-years-ago/

* Mercedes Diesel more expensive than Petrol: https://www.dallaseuropeanauto.com/what-are-the-advantages-of-buying-a-diesel-mercedes/#:~:text=When%20considering%20the%20cost%20of,money%20in%20the%20long%20run.

#<font face="Helvetica" size=6 color=02818a> **Generative AI Disclosure <a name="generativeAIdisclosure"></a>** <font>

----

##<font face="Helvetica" size=5 color=01382b> **Generative AI Disclosure Statement**<font>



 We have utilized Generative AI tools to assist with various aspects of this project. Below describe the criteria we used the tools:

* **Content Generation:**  ChatGPT was used to brainstorm ideas on EDA
* **Code Debugging:** Intellicode and ChatGPT suggested ways to improve our Python code, including providing example code, optimizing algorithms, and resolving potential errors.

* **Proofreading and Grammar Checks:** We used Grammarly and Chatgpt to refine our writing, improve readability, and ensure grammatical accuracy.

* **Fact Check for key observations:** Utilized ChatGPT as a resource to fact check assumptions and statements made in the analysis process.

* **Assistance with code:** Generative AI was utilized to correctly code the for loop, enabling the generation of brand-specific graphs depicting the relationship between mean price and mileage.

* **Assistance with code:** utilize generative AI to suggest the correlation in data that is able to match and create findings based on the research proposal
Assistance with code: ChatGPT was used to debug the codes for data visualization.

Our team has reviewed, edited, and validated all AI-generated content to ensure its accuracy, relevance, and originality in accordance with academic integrity guidelines.
"""